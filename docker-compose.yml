version: '3.8'

## Port Assignments:
##  See .env file

## Container debugging: 
# 1. append the following lines to desired container 
# 2. boot up the container using `docker-compose up -d`
# 3 run `docker exec -it <container-name> bash` to start interactive shell
# 
#    tty: true
#    stdin_open: true
#    entrypoint: bash

## Utility for booting up placeholder page:
# `docker run --hostname openhim-placeholder --network shared-health-record_sedish --name openhim-placeholder -e MESSAGE=OPENHIM-PLACEHOLDER -e PORT=3000 -d docker.io/sroze/landing-page:latest`

services:
  ###
  # nginx reverse proxy
  # TODO: set up to use non-root user. See https://www.rockyourcode.com/run-docker-nginx-as-non-root-user/
  ###
  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/letsencrypt
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - nginx-data:/var/www
    networks:
      - sedish
  certbot:
    image: certbot/dns-route53
    container_name: certbot
    entrypoint: "certbot certonly -n --agree-tos --email pmanko@uw.edu -d sedish-haiti.org -d '*.sedish-haiti.org' --dns-route53 --preferred-challenges=dns"
    environment:
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    volumes:
    - certs:/etc/letsencrypt
    - letsencrypt:/var/lib/letsencrypt
    networks:
    - sedish

  ###
  # OpenCR
  ###
  opencr:
    container_name: opencr
    hostname: opencr
    image: intrahealth/opencr:latest
    restart: unless-stopped
    environment:
      - NODE_ENV=docker
      - HAPI_FHIR_URL=http://opencr-fhir:8080/fhir/metadata
    networks:
      - sedish
    volumes:
      - ./configs/opencr/config.json:/src/server/config/config_docker.json
      - ./configs/opencr/mediator.json:/src/server/config/mediator.json
      - ./configs/opencr/decisionRules.json:/src/server/config/decisionRules.json
      - ./configs/opencr/PatientRelationship.json:/src/resources/Relationships/PatientRelationship.json
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sedish-haitiorg_sedish'
      - 'traefik.http.routers.opencr.tls=true'
      - 'traefik.http.routers.opencr.entrypoints=web-secure'
      - 'traefik.http.services.opencr.loadbalancer.server.port=3000'
      - 'traefik.http.routers.opencr.rule=Host(`${OPENCR_HOST-opencr.sedish-haiti.org}`)'

  opencr-fhir:
    image: "hapiproject/hapi:latest"
    container_name: opencr-fhir
    hostname: opencr-fhir
    restart: unless-stopped
    env_file:
     - configs/opencr/.env   
    volumes:
      - opencr-data-new:/data/hapi
      - ./configs/opencr/application.yml:/data/hapi/application.yaml
    networks:
      - sedish
    ports:
      - 8090:8080
    healthcheck:
      test: "apt-get install -y curl; curl -sS http://opencr-fhir:8080/fhir/metadata || exit 1"
      interval: 30s
      timeout: 240s
      retries: 3

  opencr-es:
    container_name: opencr-es
    hostname: es
    image: intrahealth/elasticsearch:latest
    restart: unless-stopped
    environment:
      - node.name=es01
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es-data-new:/usr/share/elasticsearch/data
    networks:
      - sedish
  ###
  # xds
  ###
  xds:
    container_name: xds-mediator
    hostname: xds
    image: ghcr.io/isanteplus/openhim-mediator-xds:master
    volumes:
      - ./configs/xds/mediator.properties:/src/main/resources/mediator.properties
    networks:
      - sedish
  ###
  # SHR
  ###
  shr:
    container_name: shr
    hostname: shr
    image: ghcr.io/i-tech-uw/shared-health-record:${SHR_VERSION-latest}
    restart: unless-stopped
    environment:
      - NODE_ENV=docker
    networks:
      - sedish
    volumes:
      - ./configs/shr/config.json:/app/config/config_docker.json
      - ./configs/shr/mediator.json:/app/config/mediator_docker.json
  
  shr-fhir:
    image: "hapiproject/hapi:latest"
    container_name: shr-fhir
    hostname: shr-fhir
    restart: unless-stopped
    volumes:
      - hapi-data:/data/hapi
      - ./configs/shr/application.yml:/data/hapi/application.yaml
    networks:
      - sedish
    env_file:
      - configs/shr/.env
    healthcheck:
      test: "apt-get install -y curl; curl -sS http://localhost:8080/fhir/metadata || exit 1"
      interval: 30s
      timeout: 240s
      retries: 5

  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    environment:
      POSTGRES_MULTIPLE_DATABASES: opencr,shr
      POSTGRES_PASSWORD: ${PG_PW-postgres}
    volumes:
      - /var/lib/postgresql/data/
      - ./configs/postgres:/docker-entrypoint-initdb.d
    networks:
      - sedish
  ####
  # Kafka
  ###
  zookeeper:
    container_name: zookeeper
    image: "bitnami/zookeeper:latest"
    hostname: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - sedish
    volumes:
      - /data

  kafka:
    image: "bitnami/kafka:latest"
    hostname: kafka
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - sedish
    entrypoint: sh -c 'sleep 30 && /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh' # prevent zookeeper conflict error
    volumes:
      - /bitnami/kafka
  ###
  # iSantePlus
  ###
  isanteplus:
    container_name: isanteplus
    hostname: isanteplus
    image: ghcr.io/isanteplus/docker-isanteplus-server:${ISANTEPLUS_DOCKER_VERSION-latest}
    restart: unless-stopped
    env_file:
      - ./configs/isanteplus/isanteplus.env
    volumes:
      - isanteplus-data:/openmrs/data
      - ./configs/isanteplus/custom_modules:/custom_modules
    networks:
      - sedish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"   
    ports:
      - "8081:8080"
      - "1044:1044"
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sedish-haitiorg_sedish'
      - 'traefik.http.routers.isanteplus.tls=true'
      - 'traefik.http.routers.isanteplus.entrypoints=web-secure'
      - 'traefik.http.services.isanteplus.loadbalancer.server.port=8080'
      - 'traefik.http.routers.isanteplus.rule=Host(`${ISANTEPLUS_HOST-isanteplus.sedish-haiti.org}`)'

  isanteplus-mysql:
    image: ghcr.io/isanteplus/docker-isanteplus-db:${ISANTEPLUS_DB_VERSION-latest}
    command: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci --sql_mode=""
    restart: unless-stopped
    container_name: isanteplus-mysql
    hostname: isanteplus-mysql
    healthcheck:
      test: "exit 0"
    environment:
      - MYSQL_DATABASE=openmrs
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
      - MYSQL_ROOT_HOST=% # Allow docker containers to connect to mysql
    volumes:
      - ./configs/isanteplus/mysql.cnf:/etc/mysql/conf.d/custom.cnf # mysql config preconfigured to allow binlog/debezium
      - mysql-data:/var/lib/mysql
    networks:
      - sedish
  ###
  # OpenHIM
  ###
  openhim-core:
    container_name: openhim-core
    image: jembi/openhim-core:latest
    restart: unless-stopped
    environment:
      mongo_url: "mongodb://mongo-db/openhim"
      mongo_atnaUrl: "mongodb://mongo-db/openhim"
      NODE_ENV: "development"
    healthcheck:
      test: "node /healthcheck.js"
      interval: 20s
      timeout: 40s
      retries: 5
    networks:
      - sedish
    volumes:
      - ./configs/openhim-core/healthcheck.js:/healthcheck.js
      - ./configs/openhim-core/default.json:/default.json
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sedish-haitiorg_sedish'
      
      - 'traefik.http.services.openhim-api.loadbalancer.server.port=8080'
      - 'traefik.http.services.openhim-api.loadbalancer.server.scheme=https'
      - 'traefik.http.routers.openhim-api.service=openhim-api'
      - 'traefik.http.routers.openhim-api.tls=true'
      - 'traefik.http.routers.openhim-api.entrypoints=web-secure'
      - 'traefik.http.routers.openhim-api.rule=Host(`${OPENHIM_API_HOST-openhim-api.sedish-haiti.org}`)'
      
      - 'traefik.http.services.openhim-ssl.loadbalancer.server.port=5000'
      - 'traefik.http.services.openhim-ssl.loadbalancer.server.scheme=https'
      - 'traefik.http.routers.openhim-ssl.service=openhim-ssl'
      - 'traefik.http.routers.openhim-ssl.tls=true'
      - 'traefik.http.routers.openhim-ssl.entrypoints=web-secure'
      - 'traefik.http.routers.openhim-ssl.rule=Host(`${OPENHIM_SSL_HOST-openhim-ssl.sedish-haiti.org}`)'
      
      - 'traefik.http.services.openhim-http.loadbalancer.server.port=5001'
      - 'traefik.http.services.openhim-http.loadbalancer.server.scheme=https'
      - 'traefik.http.routers.openhim-http.service=openhim-http'
      - 'traefik.http.routers.openhim-http.tls=false'
      - 'traefik.http.routers.openhim-http.entrypoints=web'
      - 'traefik.http.routers.openhim-http.rule=Host(`${OPENHIM_HTTP_HOST-openhim-http.sedish-haiti.org}`)'

  openhim-console:
    container_name: openhim-console
    image: jembi/openhim-console:latest
    restart: unless-stopped
    volumes:
      - ./configs/openhim-console/default.json:/usr/share/nginx/html/config/default.json
    healthcheck:
      test: "curl -sS http://openhim-console || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - sedish
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sedish-haitiorg_sedish'
      - 'traefik.http.routers.openhim-console.tls=true'
      - 'traefik.http.routers.openhim-console.entrypoints=web-secure'
      - 'traefik.http.routers.openhim-console.rule=Host(`${OPENHIM_HOST-openhim.sedish-haiti.org}`)||Host(`${OPENHIM_ROOT_HOST-sedish-haiti.org}`)'
  mongo-db:
    container_name: mongo-db
    image: mongo:3.4
    volumes:
      - "mongo-data:/data/db"
    restart: unless-stopped
    networks:
      - sedish

  openhim-config:
    container_name: openhim-config
    image: ghcr.io/i-tech-uw/openhim-config:v0.0.0
    volumes:
      - ./configs/openhim-core/initial-config.json:/app/test-openhim-config.json
    networks:
      - sedish
    environment:
      - INITIAL_PW=openhim-password
      - ADMIN_PW=$ADMIN_PW
      - API_URL=https://openhim-core:8080
  
  ## SHR Resource Stream
  streaming-pipeline: 
    image: ghcr.io/i-tech-uw/openmrs-fhir-analytics/streaming-binlog:latest
    container_name: streaming-pipeline
    healthcheck:
      test: "exit 0"
    volumes:
      - ./configs/streaming-pipeline/config.json:/deployments/config.json
      # data is the directory which you want to persist the generated parquet files
      # - ./configs/streaming-pipeline/parquet:/tmp
    environment:
      - OPENMRS_URL=http://isanteplus:8080/openmrs
      - OPENMRS_USERNAME=admin
      - OPENMRS_PASSWORD=Admin123
      - SINK_URL=http://openhim-core:5001/SHR/fhir
      - SINK_USERNAME=shr-pipeline
      - SINK_PASSWORD=shr-pipeline
      - JDBC_FETCH_SIZE=10000
      - JDBC_MAX_POOL_SIZE=50
      - JDBC_INITIAL_POOL_SIZE=10
      - JDBC_DRIVER_CLASS=com.mysql.cj.jdbc.Driver
      # the 2 variable below should be same as volume mappings above
      - PARQUET_PATH=
      - FHIR_DEBEZIUM_CONFIG_PATH=/deployments/config.json
    networks:
      - sedish
  
  wait-for-openmrs:
    profiles: ['utility']
    container_name: wait-for-openmrs
    image: ghcr.io/i-tech-uw/wait-for-openmrs-action:latest 
    command:
    - "http://isanteplus:8080/openmrs"
    - "20" 
    - "10000"
    networks:
    - sedish

  # QA Framework
  qa:
    profiles: ['test']
    image: ghcr.io/isanteplus/isanteplus-qaframework:latest
    container_name: qa
    environment:
      - ISANTEPLUS_URL=http://isanteplus:8080/openmrs
      - ISANTEPLUS_USER=admin
      - ISANTEPLUS_PW=Admin123
    networks:
      - sedish
  chrome:
    profiles: ['test']
    image: selenium/standalone-chrome
    hostname: chrome
    container_name: chrome
    networks:
    - sedish

  # Newman Tests
  newman:
    profiles: ['test']
    image: postman/newman
    volumes:
      - ./.postman:/.postman
    entrypoint: newman run $POSTMAN_COLLECTION -e /.postman/postman_env.ci.json --insecure --timeout-request 20000 --delay-request 500
    networks:
      - sedish

volumes:
  es-data-new:
    driver: local
  isanteplus-data:
    driver: local
  isanteplus1-data:
    driver: local
  isanteplus-data2:
    driver: local
  mysql-data:
    driver: local
  mysql-data2:
    driver: local
  mysql1-data:
    driver: local
  mongo-data:
    driver: local
  shr:
    driver: local
  hapi-data:
    driver: local
  opencr-data-new:
    driver: local
  certs:
    driver: local
  letsencrypt: 
    driver: local
  nginx-data: 
    driver: local

networks:
  sedish: